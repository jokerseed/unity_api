2D刚体
2D刚体组件将对象置于物理引擎的控制之下。标准刚体组件中的许多熟悉概念都延续到了2D刚体；不同之处在于，在
2D中，对象只能在XY平面中移动，并且只能在垂直于该平面的轴上旋转。


2D刚体工作原理
通常，Unity Editor的变换组件定义游戏对象（及其子游戏对象）在场景中的定位，旋转和缩放方式。更改变换组件将更新其他组件，
这样可以更新渲染对象的位置或碰撞体所在位置之类的属性。2D物理引擎能够移动碰撞体并使这些碰撞体彼此交互，
因此物理引擎需要一种方法将碰撞体的此移动状态传回变换组件。此移动以及与碰撞体的连接便是2D刚体组件的用途。
2D刚体组件会覆盖变换组件，并将其更新为2D刚体定义的位置和旋转。注意：虽然仍然可以通过自行修改变换组件来
覆盖2D刚体（因为Unity会公开所有组件上的所有属性），但是这样会导致各种问题，例如游戏对象相互穿过或嵌入等
问题以及不可预测的移动。
添加到同一游戏对象或子游戏对象的任何2D碰撞体组件都隐式附加到该2D刚体。2D碰撞体附加到2D刚体时，两者一起
移动。严禁使用变换组件或碰撞体偏移来直接移动2D碰撞体；而移动2D刚体。这样将提供最佳性能并确保正确的碰撞
检测。连接到同一2D刚体的多个2D碰撞体不会相互碰撞。这意味着可以创建一组碰撞体来有效充当单一复合碰撞体，
使所有碰撞体都与2D刚体同步移动和旋转。
设计场景时，可自由使用默认的2D刚体并开始附加碰撞体。这些碰撞体可让连接到不同2D刚体的所有其他碰撞体相互
碰撞。
提示：
添加2D刚体后可基于脚本API施力，从而让精灵以逼真的方式移动。相应的碰撞体组件也附加到精灵游戏对象时，该组件
会受到与其他移动游戏对象的碰撞的影响。通过使用物理系统可以简化许多常见的游戏机制，并减少编码实现逼真行为。


Body Type
2D刚体组件在顶部有一个显示为Body Type的设置。在此设置中选择的选项会影响组件上可用的其他设置。
Body Type有三个选项：每个选项定义一种常见和固定的行为。附加到2D刚体的2D碰撞体将继承2D刚体的Body Type。
这三个选项是：
	Dynamic
	Kinematic
	Static
所选的选项将定义：
	移动（位置和旋转）行为
	碰撞体相互作用
注意，尽管经常讲2D刚体表述为相互碰撞，但实际上发生碰撞的是每个刚体所连接的2D碰撞体。如果没有碰撞体，
2D刚体不能相互碰撞。
改变2D刚体的Body Type可能是一个复杂过程。Body Type发生变化时，各种与质量相关的内部属性都将立即重新
刷新计算，并且在游戏对象的下一个FixedUpdate期间需要重新估算连接到2D刚体的2D碰撞体的所有现有触点。
根据触点数量以及连接到刚体的2D碰撞体数量，更改Body Type可能会导致性能变化。


Body Type：Dynamic
Dynamic类型的2D刚体设计为在模拟条件下移动。这种刚体类型具有可用的全套属性（例如有限质量和阻力），并
受重力和作用力的影响。Dynamic刚体类型将于每个其他刚体类型碰撞，是最具互动性的刚体类型。这是需要移动
的对象最常见刚体类型，因此是2D刚体的默认刚体类型。此外，由于具有动态性并与周围所有对象互动，因此
也是性能成本最高的刚体类型。选择此刚体类型时，所有2D刚体属性均可用。
请勿使用变换组件来设置Dynamic类型的2D刚体的位置或旋转。模拟系统会根据Dynamic2D刚体的速度对该刚体重新定位；
可通过脚本施加于刚体的力来直接更改此值，也可以通过碰撞和重力来间接更改此值。


Body Type：Kinematic
Kinematic类型的2D刚体设计为在模拟条件下移动，但是仅在非常明确的用户控制下进行。虽然Dynamic 2D刚体受重力
和作用力的影响，但Kinematic 2D刚体并不会受此影响。因此，Kinematic 2D刚体的速度很快，与Dynamic 2D刚体
按设计应通过Rigidbody2D.MovePosition或Rigidbody2D.MoveRotation进行显示重定位。应使用物理查询来检测碰撞，
并通过脚本确定2D刚体应该移动的位置和方式。
Kinematic2D刚体仍然通过速度移动，但是此速度不受作用力和重力的而影响。Kinematic 2D刚体不会与其他Kinematic 2D刚体
碰撞，只会与Dynamic 2D刚体碰撞。与Static 2D刚体相似，Kinematic 2D刚体在碰撞期间的行为类似于不可移动的对象
（就像具有无限质量）。选择此类刚体类型时，与质量相关的属性将不可用。


Body Type：Static
Static 2D刚体设计为在模拟条件下完全不动；如果任何对象与Static 2D刚体碰撞，此类型刚体的行为类似于不可
移动的对象（就像具有无限质量）。此刚体类型也是使用资源最少的刚体类型。Static刚体只能与Dynamic 2D刚体
碰撞。不支持两个Static 2D刚体进行碰撞，因为这种刚体不是为了移动而设计的。

========================================================
可通过两种方法将2D刚体标记为Static：
1.对于具有2D碰撞体组件的游戏对象，不附加任何2D刚体组件。所有此类2D碰撞体在内部均视为已附加到单个隐藏
的Static 2D刚体组件。
2.对于需要附加2D刚体的游戏对象，将此2D刚体设置为Static

方法一是创建Static 2D碰撞体的快速方法。创建大量Static 2D碰撞体时，不为具有2D碰撞体的每个游戏对象添加
2D刚体是比较容易实现的。
方法二用于提高性能。如果需要在运行时移动或重新配置Static 2D碰撞体，该碰撞体具有自己的2D刚体时完成这些
操作会更快。如果需要在运行时移动或重新分配一组2D碰撞体，则将这些碰撞体全部设为一个标记为Static的父
2D刚体的子代会比单独移动每个游戏对象更快。


=========================================================
2D刚体属性
Simulated
使用Simulated属性可停止和启动2D刚体以及任何附加的2D碰撞体和2D关节与2D物理模拟系统之间的交互。
与启用或禁用单个2D碰撞体和2D关节组件相比，对此属性进行更改将在内存和处理方面具有更高的效率。

选中Simulated框时
2D刚体通过模拟系统进行移动（施加重力和物理作用力）
所有附加的2D碰撞体都会继续产生新的触点并不断重新估算触点
所有附加的2D关节都经过模拟并约束附加的2D刚体
2D刚体，2D碰撞体和2D关节的所有内部物理对象都保留在内存中