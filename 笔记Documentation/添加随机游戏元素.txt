从数组中选择一个随机项
var element = myArray[Random.Range(0, myArray.Length)];

选择具有不同概率的项
float Choose(flost[] probs){
	float total = 0;
	
	foreach(float elem in probs){
		total += elem;
	}
	
	float randomPoint = Random.value * total;
	
	for(int i = 0; i < probs.Length; i++){
		if(randomPoint < probs[i]){
			return i;
		}else{
			randomPoint -= probs[i];
		}
	}
	return probs.Length - 1;
}

加权连续随机值
此算法从 Random.value 读取值来选择 0 到 1 之间的“原始”随机值。
然后，该值传递给 curve.Evaluate()，在此处将其视为水平坐标，并返回曲线在该水平位置处的相应垂直坐标。
曲线较平缓的部分被选取的几率较高，而较陡峭的部分被选取的几率较低。
float CurveWeightedRandom(AnimationCurve curve){
	return curve.Evaluate(Random.value);
}

列表洗牌
void Shuffle(int[] deck){
	for(int i = 0; i < deck.Length; i++){
		int temp = deck[i];
		int randomIndex = Random.Range(0, deck.Length);
		deck[i] = deck[randomIndex];
		deck[randomIndex] = temp;
	}
}

从一组无重复的项中选择
Transform[] spawnPoints;

Transform[] ChooseSet (int numRequired) {
	Transform[] result = new Transform[numRequired];

	int numToChoose = numRequired;

	for (int numLeft = spawnPoints.Length; numLeft > 0; numLeft--) {

		float prob = (float)numToChoose/(float)numLeft;

		if (Random.value <= prob) {
			numToChoose--;
			result[numToChoose] = spawnPoints[numLeft - 1];

			if (numToChoose == 0) {
				break;
			}
		}
	}
	return result;
}

空间中随机点
var randVec = Vector3(Random.value, Random.value, Random.value);