AssetDatabase是一个API，可用于访问项目中包含的资源。除此以外，它还提供了查找和加载资源的方法，以及创建，删除和修改资源的方法。
Unity Editor在内部使用AssetDatabase来跟踪资源文件并维护资源和引用它们的对象之间的链接关系。由于Unity需要跟踪项目文件夹的所有更改，
因此如果要访问或修改资源数据，则应始终使用AssetDatabase API而不是文件系统。

AssetDatabase接口仅在编辑中可用，并且在构建的播放中没有任何函数。与所有其他编辑类一样，它仅适用于放置在Editor文件夹中的脚本。

导入资源================================
Unity通常会在资源被拖入项目时自动导入资源，但也可以在脚本控制下导入资源。
using UnityEngine;
using UnityEditor;

public class ImportAsset{
	[MenuItem("AssetDatabase/ImportExample")]
	static void ImportExample(){
		AssetDatabase.ImportAsset("Assets/Textures/texture.jpg", ImportAssetOption.Default);
	}
}


加载资源======================================
编辑仅在需要时加载资源，例如，是否将资源添加到场景或从Inspector面板中进行编辑。
using Unity.Engine;
using Unity.Editor;

public class ImportAsset{
	[MenuItem("AssetDatabase/LoadAssetExample")]
	static void ImportExample(){
		Texture2D t = AssetDatabase.LoadAssetAtPath("Assets/Textures/texture.jpg", typeof(Texture2D) as Texture2D);
	}
}


使用AssetDatabase进行文件操作================
由于Unity保留有关资源文件的元数据，因此不应使用文件系统创建，移动或删除这些文件。
public class AssetDatabaseIOExample{
	[MenuItem("AssetDatabase/FileOperationsExample")]
	static void Example{
		string ret;
		
		//创建
		Material material = new Material(Shader.Find("Specular"));
		AssetDatabase.CreateAsset(material, "Assets/MyMaterial.mat");
		if(AssetDatabase.Contains(materail)){
			Debug.Log("Material asset created");
		}
		
		//重命名
		ret = AssetDatabase.RenameAsset("Assets/MyMaterial.mat", "MyMaterialNew");
		if(ret == ""){
			Debug.log("Material asset renamed to MyMaterialNew");
		}else{
			Debug.Log(ret);
		}
		
		//创建文件夹
		ret = AssetDatabase.CreteFolder("Assets", "NewFolder");
		if(AssetDatabase.GUIDToAssetPath(ret) != "")
			Debug.Log("Folder asset created");
		else
			Debug.Log("Couldn't find the GUID for the path");
			
		//移动
		ret = AssetDatabase.MoveAsset(AssetDatabase.GetAssetPath(material), "Assets/NewFolder/MyMaterial.mat");
		if(ret == "")
			Debug.Log("Material asset moved to NewFolder/MyMaterialNew.mat");
		else
			Debug.Log(ret);
			
		//复制
		if(AssetDatabase.CopyAsset(AssetDatabase.GetAssetPath(material), "Assets/MyMaterialNew.mat"))
			Debug.Log("Material asset copied as Assets/MyMaterialNew.mat");
		else
			Debug.Log("Couldn't copy the material");
		
		
		//手动刷新数据库以通知更改
		AssetDatabase.Refresh();
		Material MaterialCopy = AssetDatabase.LoadAssetAtPath("Assets/MyMaterialNew.mat" 
			,typeof(Material) as Material);
			
		//移动垃圾箱
		if(AssetDatabase.MoveAssetToTrash(AssetDatabase.GetAssetPath(material)))
			Debug.log("material asset deleted");
		
		//删除
		if(AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(material)))
			Debug.Log("Material asset deleted");
		if(AssetDatabase.DeleteAsset("Assets/NewFolder"))
			Debug.Log("NewFolder deleted");
			
		// 进行所有更改后刷新 AssetDatabase
		AssetDatabase.Refresh();
	}
}


使用AssetDatabase.Refresh()===========
在完成资源的修改后，应调用AssetDatabase.Refresh来提交对数据库的更改并使其在项目中可见。