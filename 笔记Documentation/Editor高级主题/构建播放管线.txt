构建播放管线
在构建播放时，优势可能希望以某种方式修改构建的播放。例如，可能希望添加自定义图标，
在播放旁边复制一些文档或构建安装程序。可以通过编辑脚本实现此目的，使用BuildPipeline.BuildPlayer来运行
构建，接着使用所需的任何后期处理代码：
using UnityEditor;
using System.Diagnostics;

public class ScriptBath{
	[MenuItem("MyTools/Windows Build With Postprocess")]
	public static void BuildGame(){
		//获取文件名
		string path = EditorUtility.SaveFolderPanel("Choose Location od Built Game", "", "");
		string[] levels = new string[]{"Assets/Scene1.unity", "Assets/Scene2.unity"};
		
		//构建播放
		BuildPipeline.BuildPlayer(levels, path + "/BuiltGame.exe", BuildTarget.StandaloneWindows, BuildOptions.None);
		
		//将文件从项目文件夹复制到构建文件夹，与构建的游戏放在一起
		FileUtil.CopyFileOrDirectory("Assets/Templates/Readme.txt", path + "Readme.txt");
		
		//运行游戏（System.Diagnostics中的Process类）
		Process proc = new Process();
		proc.StartInfo.FileName = path + "/BuiltGame.exe";
		proc.Start();
	}
}

PostProcessBuild属性
可以使用PostProcessBuildAttribute的postprocessOrder参数来定义构建方法的执行顺序，并使用Process类从这些方法调用外部脚本。
此参数将构建方法从低到高排序，可为其分配任何负值或正值。